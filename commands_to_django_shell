# 1. Создать двух пользователей 

from django.contrib.auth.models import User

User.objects.create_user(username = 'Roman', password = '123', first_name = 'Roman', last_name = 'Sermyagin', email = 'skimprem@gmail.com')
User.objects.create_user(username = 'kir', password = '321', first_name = 'Kirill', last_name = 'Kirill', email = 'kir1984@mail.ru')

# 2. Создать два объекта модели Author, связанные с пользователем

from accounts.models import *
Author.objects.create(user = User.objects.get(username = 'Roman'))
Author.objects.create(user = User.objects.get(username = 'kir'))

# 3. Добавить 4 категории в модель Category

from posts.models import *
Category.objects.create(category_name = 'Наука')
Category.objects.create(category_name = 'Искусство')
Category.objects.create(category_name = 'Технологии')
Category.objects.create(category_name = 'Спорт')

# 4. Добавить 2 статьи и 1 новость
Post.objects.create(author = Author(pk=1), post_type = 'PA', title = 'Intercomparing Superconducting Gravimeter Records in a Dense Meter-Scale Network at the J9 Gravimetric Observatory of Strasbourg, France', text = 'This study is a metrological investigation of eight superconducting gravimeters that have operated in the Strasbourg gravimetric Observatory. These superconducting gravimeters include an older compact C026 model, a new observatory type iOSG23 and six iGravs (6, 15, 29, 30, 31, 32). We first compare the amplitude calibration of the meters using measurements from FG5 #206 absolute gravimeter (AG). In a next step we compute the amplitude calibration of all the meters by time regression with respect to iOSG23 itself carefully calibrated by numerous AG experiments. The relative calibration values are much more precise than absolute calibration for each instrument and strongly reduce any tidal residual signal. We also compare the time lags of the various instruments with respect to iOSG23, either by time cross-correlation or tidal analysis for the longest records (about 1 year). The instrumental drift behavior of the iGravs and iOSG23 is then investigated and we examine the relationships observed between gravity and body temperature measurements. Finally, we compare the noise levels of all the instruments. A three-channel correlation analysis is used to separate the incoherent (instrumental) noise from the coherent (ambient) noise. The self-noise is then compared to a model of thermal noise (Brownian motion) using the known instrumental parameters of the damped harmonic oscillator. The self-noise of iGrav instruments is well-explained by the thermal noise model at seismic frequencies (between 10–3 and 10–2 Hz). As expected, the self-noise of iOSG23 with a heavier sphere is also lower than that of iGravs at such frequencies.')

Post.objects.create(author = Author(pk=1), post_type = 'PA', title = 'A transportable quantum gravimeter employing delta-kick collimated Bose–Einstein condensates', text = 'Gravimetry with low uncertainty and long-term stability opens up new fields of research in geodesy, especially in hydrology and volcanology. The main limitations in the accuracy of current generation cold atom gravimeters stem from the expansion rate and the residual centre-of-mass motion of their atomic test masses. Our transportable quantum gravimeter QG-1 aims at overcoming these limitations by performing atom interferometry with delta-kick collimated Bose–Einstein condensates generated by an atom chip. With our approach we anticipate to measure the local gravitational acceleration at geodetic campaigns with an uncertainty less than 1 nm/s2 surpassing the state-of-the-art classic and quantum based systems. In this paper, we discuss the design and performance assessment of QG-1.')

Post.objects.create(author = Author(pk=2), post_type = 'NE', title = 'В СБР рассказали о состоянии заразившейся коронавирусом Васнецовой', text = 'У заразившейся коронавирусом российской биатлонистки Валерии Васнецовой есть симптомы заболевания, сообщил в Telegram-канале глава пресс-службы Союза биатлонистов России (СБР) Сергей Аверьянов. Ранее было объявлено, что Васнецова сдала два положительных ПЦР-теста на COVID-19 и была изолирована. Впоследствии сама спортсменка в социальных сетях подтвердила, что пропустит Олимпиаду в Пекине. В составе российской команды ее может заменить Евгения Буртасова. — Всем, кто беспокоится о здоровье Леры Васнецовой. Разговаривал с ней сейчас. Сказать, что она очень расстроена, ничего не сказать. Чувствует себя удовлетворительно, температура скачет, есть симптомы, — написал Аверьянов. В понедельник было объявлено, что скелетонисты сборной России Никита Трегубов и Владислав Семенов не выступят на Олимпийских играх из-за заражения коронавирусом.')

# 5. Присвоить им категории

PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(category_name = 'Наука'))
PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(category_name = 'Технологии'))
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(category_name = 'Технологии'))
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(category_name = 'Наука'))
PostCategory.objects.create(post = Post.objects.get(pk=3), category = Category.objects.get(category_name = 'Спорт'))

# 6. Создать 4 комментария к разным объектам модели Post

Comment.objects.create(post = Post.objects.get(pk=1), user = User.objects.get(username = 'Roman'), text = 'Интересная статья о свехрпроводящих гравиметрах. Жаль, что из-за санкций, в нашей стране такие появятся совсем не скоро')
Comment.objects.create(post = Post.objects.get(pk=2), user = User.objects.get(username = 'Roman'), text = 'За квантовыми гравиметрами будущее высокоточной наземной гравиметрии. Но в России такие приборы делать не умеют, и закупить у иностранных производителей мы в ближайшее десятилетие не сможем из-за санкций')
Comment.objects.create(post = Post.objects.get(pk=3), user = User.objects.get(username = 'Roman'), text = 'Спортом не интересуюсь, но кажется новость уже давно неактуальна')
Comment.objects.create(post = Post.objects.get(pk=1), user = User.objects.get(username = 'kir'), text = 'Ничего не понятно, но очень интересно. Надо бы ещё выучить английский язык..')

# 7. Применить функции like(), dislike(), скорректировать рейтинги объектов

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=4).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=3).dislike()

# 8. Обновить рейтинги пользователей

Author.objects.get(pk=1).update_rating()
Author.objects.get(pk=2).update_rating()

# 9. Вывести username и рейтинг лучшего пользователя

Author.objects.all().order_by('-_rating').values('user', '_rating')[0]

# 10. Вывести дату добавления, автора, рейтинг, заголовок и превью лучшей статьи

Post.objects.all().order_by('-_rating').values('pub_time', 'author', '_rating', 'title')[0]
best_post = Post.objects.all().order_by('-_rating')[0]
best_post.preview()

# 11. Вывести все комментарии к этой статье

Comment.objects.filter(post = best_post).values('pub_time', 'user', '_rating', 'text')